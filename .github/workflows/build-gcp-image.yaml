# Reusable Workflow to build and pushes a Docker image to Google Artifact Registry

# Prerequisites:
# 1. Create service account
#   1a. Service Account Token Creator
# 2. Generate service account key
#   2a. convert multiline key to single line with jq command (cat key.json | jq -r tostring)
#   2b. create environment secret, Name: GOOGLE_CREDENTIALS, Value: key.json contents
# 3. Make sure the Artifact repo has already been provisioned.

name: Docker build and push to Artifact Registry

on:
  workflow_call:
    inputs:
      environment:
        description: 'The environment to deploy to'
        required: true
        type: string
        default: 'production'
    outputs:
      version:
        description: 'The version of the image that was built'
        value: ${{ jobs.build_push.outputs.version }}

jobs:
  build_push:
    name: Build Image for GCP
    environment: ${{ inputs.environment }}
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Docker meta
        uses: docker/metadata-action@v4
        id: meta
        with:
          images: ${{ env.GOOGLE_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=pr
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
          flavor: |
            latest=auto

      - name: Authenticate Google Cloud
        uses: google-github-actions/auth@v1
        id: auth
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}
          token_format: 'access_token'

      - name: Login to Google Artifact Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.GOOGLE_REGISTRY_LOCATION }}-docker.pkg.dev
          username: 'oauth2accesstoken'
          password: ${{ steps.auth.outputs.access_token }}

      - name: Build and Push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
